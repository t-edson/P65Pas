<?xml version="1.0"?>
<Language name="P65Pas Pascal" ext="pas">
  <!-- Atributos a usar. No cambiar formato porque se modifica automáticamente-->
  <Attribute Name="Keyword"   ForeCol="#0000FF" Bold="True"  Italic="False" Underline="False"/>
  <Attribute Name="Comment"   ForeCol="#008000" Bold="False" Italic="False" Underline="False"/>
  <Attribute Name="Number"    ForeCol="#074BFF" Bold="False" Italic="False" Underline="False"/>
  <Attribute Name="String"    ForeCol="#074BFF" Bold="False" Italic="False" Underline="False"/>
  <Attribute Name="Boolean"   ForeCol="#000000" Bold="False" Italic="False" Underline="False"/>
  <Attribute Name="Directive" ForeCol="#FE2EF7" Bold="False" Italic="False" Underline="False"/>
  <Attribute Name="Asm"       ForeCol="#60C060" Bold="False" Italic="True" Underline="False"/>
  <Attribute Name="Types"     ForeCol="#000000" Bold="False" Italic="False" Underline="False"/>
  <Attribute Name="Symbol"    ForeCol="#000000" Bold="False" Italic="False" Underline="False"/>
  <Completion OpenOnKeyUp="True">
  <!-- Atributos a usar. Fin de lista. -->
    <!-- Completado para después de punto. Los ítems se llenan dinámicamente -->
	<OpenOn Name='AfterDot1' AfterPattern="Identifier,'.'" FilterBy="None" Action="Insert">
		DummyItem
	</OpenOn>	
	<OpenOn Name='AfterDot2' AfterPattern="Identifier,'.',AllIdentifiers">
		DummyItem
	</OpenOn>	
	<List Name="KeywordSec" IconIndex='2'>
  program
  unit
  uses
  var
  const
  type
  procedure
  begin
  interface
	</List>
	<List Name="PlantillasSec" IconIndex='5'>
  "program ... begin ... end.|{Description of the program.}\nprogram nombre;\nbegin\n  \_\nend."
  "unit ... end.|{Description of the unit.}\nunit unitName;\ninterface\n  \_\nimplementation\n\nend."
  "uses Commodore64;|uses Commodore64;\n"
  "var ... varName ... |var\n\u  \_varName: byte;"
  "const ... |const\n\u  \_consName = 0;"
  "type ... |type\n\u  \_typeName = byte;"
  "procedure ... begin ... end;|procedure proc1;\n\u\ubegin\n\u  \_\n\uend;"
  "begin ... end. |begin\n  \_\n\uend."
  "interface ... implementation|interface\n\nimplementation\n\nend."
	</List>
	<!-- Completado en el bloque principal-->
	<OpenOn Name="SecMain" Block="Main" AfterPattern="AllIdentifiers" FilterBy="LastTokPart">
      <!--Completado para identificdores, dentro del bloque MAIN-->
      <Include List="KeywordSec"/>
      <Include List="PlantillasSec"/>
	</OpenOn>	
	<!-- Completado de unidades-->
	<OpenOn Name='unit1' AfterPattern='"uses",space' FilterBy="none" Action="Insert" Block="Uses">
      "unit1"
	</OpenOn>	
	<OpenOn Name='unit2' AfterPattern='",",space' FilterBy="none" Action="Insert" Block="Uses">
      "unit1"
	</OpenOn>	
	<OpenOn Name='unit3' AfterPattern='space, identifier' Block="Uses">
      "unit1"
	</OpenOn>	
	<!-- Completado para tipos -->
    <List Name='types' IconIndex='1'>  bit; byte; "byte absolute $20;" word; boolean; char; dword; </List>
	<OpenOn AfterPattern="':',space" FilterBy="none" Action="Insert" Block="var">
	  <Include List="types"/>
	</OpenOn>	
	<OpenOn AfterPattern="':',space,identifier" Block="var">
	  <Include List="types"/>
	</OpenOn>	
	<OpenOn AfterPattern="':',space" FilterBy="none" Action="Insert" Block="ProcParam">
	  <Include List="types"/>
	</OpenOn>	
	<OpenOn AfterPattern="':',space,identifier" Block="ProcParam">
	  <Include List="types"/>
	</OpenOn>	
	<!-- Completado dentro del bloque VAR. -->
	<OpenOn Block="var">
	  var1 var2 var3
	  <!-- patrones que pueden seguir después de un var -->
	 "absolute" "var" "const" "begin"
	 <Include List="PlantillasSec"/>
	</OpenOn>	
	<!-- Completado dentro del bloque CONST. -->
	<OpenOn Block="const">
	  cons1 cons2 cons3
	  <!-- patrones que pueden seguir después de un const -->
	 "var" "const" "begin"
	 <Include List="PlantillasSec"/>
	</OpenOn>	
	<!-- Completado en bloques Begin End -->
	<OpenOn Name="BE2" AfterPattern="':'" FilterBy="none" Action="RepLastTok" Block="BeginEnd">
	  ":= "
	</OpenOn>	
	<OpenOn Name="BE3" AfterPattern="space,identifier,space" FilterBy="none" Action="Insert" Block="BeginEnd">
	  ":= "
	</OpenOn>	
	<OpenOn Name="BE4" AfterPattern="AllIdentifiers">
      <!--Completado para identificdores, fuera del bloque MAIN-->
      <!--Se llena dinámicamente por la unidad CodeTools-->
	</OpenOn>	
	<!-- Completado de directivas-->
	<OpenOn AfterPattern="Directive" Iconindex='3'>
      "{$BOOTLOADER NONE}"
      "{$BOOTLOADER JMP}"
      "{$BOOTLOADER C64}"
      "{$BOOTLOADER $10,$20,$30}"
      "{$FREQUENCY \_10Mhz}"
	  "{$ORG \_$0801}"
	  "{$IFDEF \_}"
	  "{$IFDEF \_}\n\n\u{$ELSE}\n\n\u{$ENDIF}"
	  "{$IFNDEF \_}"
	  "{$IF \_}"
	  "{$IFNOT \_}"
	  "{$ELSE}"
	  "{$ENDIF}"
	  "{$DEFINE \_}"
	  "{$DEFINE symbol}"
	  "{$DEFINE macro=valor}"
	  "{$INCLUDE \_}"
	  "{$INCLUDE extra.pas}"
      "{$BIN2CSV \_}"	  
      "{$BIN2CSV data.bin}"	  
	  "{$OUTPUTHEX \_}"
	  "{$OUTPUTHEX 'output.hex'}"
	  "{$MODE PASCAL}"
	  "{$MODE PICPAS}"
	  "{$MSGBOX 'Hello'}"
	  "{$MSGWAR 'Warning'}"
	  "{$MSGERR 'Error'}"
	  "{$SET \_}"
	  "{$SET variable = 'valor'}"
	  "{$STRING NONE}"
	  "{$STRING NULL_TERMINATED}"
	  "{$INFO \_}"
	  "{$INFO 'Hello'}"
	  "{$WARNING \_}"
	  "{$WARNING 'Hello'}"
	  "{$ERROR \_}"
	  "{$ERROR 'Hello'}"
	  "{$CLEAR_STATE_RAM}"
	  "{$SET_STATE_RAM '\_'}"
	  "{$SET_STATE_RAM '000-00B:GPR'}"
	  "{$SET_DATA_ADDR '\_'}"
	  "{$SET_DATA_ADDR '00F0-00FF'}"
	  "{$PROCESSOR CPU6502}"
	  "{$PROCESSOR CPU65C02}"
	</OpenOn>	
	<!-- Completado en ASM-->
	<OpenOn AfterPattern="Asm" FilterBy="LastIdentPart">
ADC AND ASL
BCC BCS BEQ BIT BMI BNE BPL BRK BVC BVS CLC
CLD CLI CLV CMP CPX CPY
DEC DEX DEY
EOR
INC INX INY
JMP JSR
LDA LDX LDY LSR
NOP
ORA
PHA PHP PLA PLP
ROL ROR RTI RTS
SBC SEC SED SEI STA STX STY
TAX TAY TSX TXA TXS TYA
BRA STZ PHX PHY PLX PLY TRB TSB STP WAI
RMB0 RMB1 RMB2 RMB3 RMB4 RMB5 RMB6 RMB7
SMB0 SMB1 SMB2 SMB3 SMB4 SMB5 SMB6 SMB7
BBR0 BBR1 BBR2 BBR3 BBR4 BBR5 BBR6 BBR7
BBS0 BBS1 BBS2 BBS3 BBS4 BBS5 BBS6 BBS7
	_H _E _U ORG DB DW
	</OpenOn>	
  </Completion>
  <!-- *********************************************************************** -->
  <!-- FIN COMPLETION -->
  <!-- *********************************************************************** -->
  
  <Identifiers CharsStart= "A..Za..z_" Content = "A..Za..z0..9_"> 
    <token attribute="Keyword"> 
    absolute array asm as 
    begin 
    case  const class 
    destructor do  downto dispose  
    else elsif end exit except
    file finalization finally for forward function
    goto
    if  implementation  inherited  inline  interface interrupt initialization  is 
    nil
    object  of  on  operator
    procedure packed program 
    repeat record register registerA registerX registerY
    string set  shl  shr  
    then to type
    unit  until  uses 
    var
    while  with 
    </token>
    <!--operadores--> 
    <token attribute="Keyword"> 
	and or xor not div mod in
    </token>
    <!--enumerado boolean--> 
    <token attribute="Boolean"> 
	true false
    </token>
    <!--tipos de datos--> 
    <token attribute="Types"> 
	byte word boolean char dword
    </token>
  </Identifiers>
  
  <!--Definición de tokens--> 
  <Token CharsStart="#" Content = '0..9' Attribute='STRING'> </Token>
  <Token CharsStart="0..9" Content = '0..9.' Attribute='NUMBER'> </Token>
  <Token CharsStart="$" Content = '0..9ABCDEFabcdef' Attribute='NUMBER'> </Token>
  <Token CharsStart="%" Content = '0..1' Attribute='NUMBER'> </Token>
  <String Start="'" End="'"></String>
  <Comment Start="//" ></Comment>
  <Comment Start="(*" End="*)" Multiline="true"></Comment>
  <Token Start="{" End="}" Multiline="true" Folding="true" Attribute="Comment"></Token>
  <Token Start="{$" End="}" Multiline="false" Folding="false" Attribute="Directive"></Token>
  <Token Start="asm" End="END" Multiline="true" Folding="true" Attribute="Asm"></Token>

  <!--***********************************************************************
                                 Bloques en Main 
  *************************************************************************-->
  <Section Name="interface" Start="interface" BackCol="transparent" Parent='Main'> 
    <Section Name="interf_var" Start="var" BackCol="transparent"> 
    </Section>
    <Section Name="interf_const" Start="const" BackCol="transparent"> 
    </Section>
  </Section>
  <Section Name="implementation" Start="implementation" BackCol="transparent" Parent='Main'> 
    <Section Name="interf_var" Start="var" BackCol="transparent"> 
    </Section>
    <Section Name="interf_const" Start="const" BackCol="transparent"> 
    </Section>
  </Section>
  <!--Legalmente, se debería separar las sintaxis para programas y unidades, pero
  aquí se está definiendo una sintaxis que sea válida tanto para programas como para
  unidades, por eso, se pone la definición de estas secciones, después de INTERFACE
  e IMPLEMENTATION, para que se reconozcan primero las secciones VAR y CONST, como 
  anidadas, de otra forma, se reconocerían como secciones adicionales a INTERFACE
  e IMPLEMENTATION--> 
  <Section Name="var" Start="var" BackCol="transparent" Parent='Main'> 
  </Section>
  <Section Name="const" Start="const" BackCol="transparent" Parent='Main'> 
  </Section>
  <!--***********************************************************************
                                 Bloques Recrusivos
  *************************************************************************-->
  <Block Start="Repeat" End="Until"> </Block>
  <Block Start="Case" End= "End" ></Block>
  <Block Name="Record" Start="Record" End="End" BackCol="Transparent"></Block>
  
  <Block Name="Proc" Start="procedure" End="end" BackCol="#E0F5FF">
    <Block Name="ProcParam" Start="(" End=")" Folding="false"></Block>
    <Block Name="ProcBody"  Start="Begin" End= "End" CloseParent="true" BackCol="transparent"></Block>
  </Block>
  <Block Name="Func" Start="function" End="end" BackCol="#E0F5FF">
    <Block Name="FuncParam" Start="(" End=")" Folding="false"></Block>
    <Block Name="FuncBody"  Start="Begin" End= "End" CloseParent="true" BackCol="transparent"></Block>
  </Block>
  <Block Name="BeginEnd"  Start="Begin" End= "End"></Block><!--Al final para dar prioridad al Begin-End de PROCEDURE-->
  <!-- Bloques específico para la nueva sintaxis de PicPas -->
  <Block Name="If" Start="IF" End="END" Folding="False">
	<Section Start="THEN"> </Section>
	<Section Start="ELSIF"> </Section>
	<Section Start="ELSE"> </Section>
  </Block>
  <Block Name="While" Start="WHILE" End="END" Folding="True"/>
  <Block Name="For"   Start="FOR"   End="END" Folding="True"/>
  <Block Name="Uses"  Start="USES"  End=";"   Folding="True"/>
  
</Language>
