program p65pas;
{$mode objfpc}{$H+}
uses
  Classes, Compiler_PIC16, LexPas, CompGlobals, XpresElemP65;
type
  { TProg }
  TProg = class
  private
    nErrors  : Integer;
    srcFile  : string;      //archivo de entrada
    Compiler : TCompiler_PIC16;
    procedure CompilerError(errTxt: string; const srcPos: TSrcPos);
    procedure CompilerInfo(infTxt: string; const srcPos: TSrcPos);
    procedure CompilerMessageBox(txt: string; mode: integer);
    procedure CompilerWarning(warTxt: string; const srcPos: TSrcPos);
    procedure PrintHelp;
  public
    procedure Compile;
    constructor Create;
    destructor Destroy; override;
  end;
const
  //WA_DIR_NOEXIST = 'Directory: %s no found. It will be created';
  //ER_CANN_READDI = 'Cannot read or create directories.';
  ER_CANN_SPECTWO  = 'ERROR: Cannot specify source file twice.';
  ER_NOINPFIL_SPEC = 'ERROR: No input file specified.';
var
  prog: TProg;

  function OSVersion: string;
  begin
    {$IFDEF LCLcarbon}
    OSVersion := 'Mac OS X 10.';
    {$ELSE}
    {$IFDEF Linux}
    OSVersion := 'Linux Kernel ';
    {$ELSE}
    {$IFDEF UNIX}
    OSVersion := 'Unix ';
    {$ELSE}
    {$IFDEF WINDOWS}
    OSVersion:= 'Windows ';
    {$ENDIF}
    {$ENDIF}
    {$ENDIF}
    {$ENDIF}
  end;
  { TProg }
procedure TProg.CompilerError(errTxt: string; const srcPos: TSrcPos);
begin
  inc(nErrors);
  writeln('ERROR: ' + errTxt);
end;
procedure TProg.CompilerWarning(warTxt: string; const srcPos: TSrcPos);
begin
  writeln('WARN: ' + warTxt);
end;
procedure TProg.CompilerInfo(infTxt: string; const srcPos: TSrcPos);
begin
  writeln('INFO: ' + infTxt);
end;
procedure TProg.CompilerMessageBox(txt: string; mode: integer);
begin
  writeln('MESSAGE: ' + txt);
end;
procedure TProg.Compile;
{Ejecuta el compilador para generar un archivo binario de salida.}
var
  pars: string = '';
  i: Integer;
  par: String;
begin
  nErrors := 0;
  srcFile := '';
  writeln('P65Pas compiler (' + VER_PROG + ') for ' + OSVersion + '');
  writeln('By Tito Hinostroza - 2022. All rights reserved.');
  writeln('');
  //Read Command Line parameters
  i := 1;  //para que explore desde el principio
  while i <= ParamCount do begin
     par := ParamStr(i);
     if par[1] = '-' then begin //Is parameter
        AddLine(pars, par);
     end else begin  //Must be the source file
        if srcFile<>'' then begin
          //Already set
          writeln(ER_CANN_SPECTWO);
          exit;
        end;
        srcFile := par;
     end;
     inc(i);  //pasa al siguiente
  end;
  if srcFile='' then begin
    writeln(ER_NOINPFIL_SPEC);
    PrintHelp;
    exit;
  end;
  //Inicio de compilación
  Compiler.Exec(srcFile, '', pars);
end;
procedure TProg.PrintHelp;
{Muestra las opciones de línea de comando que soporta este compilador}
begin
  writeln('SYNTAX: ');
  writeln('  p65pas <input file> <options>');
  writeln('');
  writeln('COMPILING OPTIONS:');
  writeln('');
  writeln('  -Cn    Compilation null. Do nothing.');
  writeln('  -Ca    Do only the Analysis stage.');
  writeln('  -Cao   Do Analysis and Optimization stage.');
  writeln('  -C     Do the Complete compilation. DEFAULT option.');
  writeln('  -Cf    Disable compiling FOR like REPEAT structure.');
  writeln('');
  writeln('OPTIMIZATION OPTIONS:');
  writeln('  -Ov    Reuse procedure local variables.');
  writeln('  -Or    Optimize the RTS instruction in procedures.');
  writeln('  -Ou    Removes unnecessary ASM instructions.');
  writeln('');
  writeln('ASSEMBLER OPTIONS:');
  writeln('  -A0 Output in normal Assembler.');
  writeln('  -A1 Output in BASIC POKE''s loader.');
  writeln('  -Ac Include commnents in ASM output.');
  writeln('  -Av Include variables information section.');
  writeln('  -Au Exclude unused variables in variable section.');
  writeln('  -An Include variable names in instructions.');
  writeln('  -Aa Include memory address in instructions.');
  writeln('');
  writeln('OTHER OPTIONS:');
  writeln('  -Fu<path> Add a new path to the unit paths list.');
  writeln('  -Dn    Disable output generated by directives');
end;
constructor TProg.Create;
begin
  //Init compiler
  Compiler:= TCompiler_PIC16.Create;
  Compiler.OnError       := @CompilerError;
  Compiler.OnWarning     := @CompilerWarning;
  Compiler.OnInfo        := @CompilerInfo;
  Compiler.OnMessageBox  := @CompilerMessageBox;
end;
destructor TProg.Destroy;
begin
  Compiler.Destroy;
end;

begin
  curLanguage := 'en';
  Compiler_PIC16.SetLanguage;
  prog := TProg.Create;
  prog.Compile;
  prog.Destroy;
//  readln;
end.

